<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~ WSO2 Inc. licenses this file to you under the Apache License,
~ Version 2.0 (the "License"); you may not use this file except
~ in compliance with the License.
~ You may obtain a copy of the License at
~    http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing,
~ software distributed under the License is distributed on an
~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~ KIND, either express or implied.  See the License for the
~ specific language governing permissions and limitations
~ under the License.
-->
<template name="getEventSearch" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="q" description="Query that will return events matching the given keyword(s)"/>
    <parameter name="sinceId" description="Pass event id to only return events that are created after this event id"/>
    <parameter name="sortBy" description="Sort the list of events by id,date,name,city"/>
    <parameter name="popular" description="Pass in true to return events that have already sold a minimum threshold of tickets"/>
    <parameter name="address" description="The address of the location that you want to search around"/>
    <parameter name="latitude" description="The latitude of the location that you want to search around"/>
    <parameter name="longitude" description="The longitude of the location that you want to search around"/>
    <parameter name="within" description="The distance that you want to search around the given location"/>
    <parameter name="city" description="Only return events that are located in the given city"/>
    <parameter name="region" description="Only return events that are located in the given region"/>
    <parameter name="country" description="Only return events that are located in the given country"/>
    <parameter name="organizerId" description="Only return events that are organized by a specific Organizer"/>
    <parameter name="userId" description="Only return events that are organized by a specific User"/>
    <parameter name="trackingCode" description="Append the given tracking code to the event URLs that are returned"/>
    <parameter name="categories" description="Only return events that are in a specific category pass category id"/>
    <parameter name="formats" description="Only return events that are in a specific format"/>
    <parameter name="startDateRangeStart" description="Only return events with start dates after the given UTC date"/>
    <parameter name="startDateRangeEnd" description="Only return events with start dates before the given UTC date"/>
    <parameter name="startDateKeyword" description="Only return events with start dates within the given keyword date range"/>
    <parameter name="dateCreatedRangeStart" description="Only return events with date created after the given UTC date"/>
    <parameter name="dateCreatedRangeEnd" description="Only return events with date created before the given UTC date"/>
    <parameter name="dateCreatedKeyword" description="Only return events with date created within the given keyword date range"/>
    <parameter name="dateModifiedRangeStart" description="Only return events with date modified after the given UTC date"/>
    <parameter name="dateModifiedRangeEnd" description="Only return events with date modified before the given UTC date"/>
    <parameter name="dateModifiedKeyword" description="Only return events with date modified within the given keyword date range"/>
    <sequence>
        <property name="uri.var.q" expression="$func:q"/>
        <property name="uri.var.sinceId" expression="$func:sinceId"/>
        <property name="uri.var.sortBy" expression="$func:sortBy"/>
        <property name="uri.var.popular" expression="$func:popular"/>
        <property name="uri.var.address" expression="$func:address"/>
        <property name="uri.var.latitude" expression="$func:latitude"/>
        <property name="uri.var.longitude" expression="$func:longitude"/>
        <property name="uri.var.within" expression="$func:within"/>
        <property name="uri.var.city" expression="$func:city"/>
        <property name="uri.var.region" expression="$func:region"/>
        <property name="uri.var.country" expression="$func:country"/>
        <property name="uri.var.organizerId" expression="$func:organizerId"/>
        <property name="uri.var.userId" expression="$func:userId"/>
        <property name="uri.var.trackingCode" expression="$func:trackingCode"/>
        <property name="uri.var.categories" expression="$func:categories"/>
        <property name="uri.var.formats" expression="$func:formats"/>
        <property name="uri.var.startDateRangeStart" expression="$func:startDateRangeStart"/>
        <property name="uri.var.startDateRangeEnd" expression="$func:startDateRangeEnd"/>
        <property name="uri.var.startDateKeyword" expression="$func:startDateKeyword"/>
        <property name="uri.var.dateCreatedRangeStart" expression="$func:dateCreatedRangeStart"/>
        <property name="uri.var.dateCreatedRangeEnd" expression="$func:dateCreatedRangeEnd"/>
        <property name="uri.var.dateCreatedKeyword" expression="$func:dateCreatedKeyword"/>
        <property name="uri.var.dateModifiedRangeStart" expression="$func:dateModifiedRangeStart"/>
        <property name="uri.var.dateModifiedRangeEnd" expression="$func:dateModifiedRangeEnd"/>
        <property name="uri.var.dateModifiedKeyword" expression="$func:dateModifiedKeyword"/>

        <filter xpath="(not(get-property('uri.var.q') = '' or (not(string(get-property('uri.var.q'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'q=',get-property('uri.var.q'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.sinceId') = '' or (not(string(get-property('uri.var.sinceId'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'since_id=',get-property('uri.var.sinceId'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.sortBy') = '' or (not(string(get-property('uri.var.sortBy'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'sort_by=',get-property('uri.var.sortBy'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.popular') = '' or (not(string(get-property('uri.var.popular'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'popular=',get-property('uri.var.popular'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.address') = '' or (not(string(get-property('uri.var.address'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'location.address=',get-property('uri.var.address'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.latitude') = '' or (not(string(get-property('uri.var.latitude'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'location.latitude=',get-property('uri.var.latitude'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.longitude') = '' or (not(string(get-property('uri.var.longitude'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'location.longitude=',get-property('uri.var.longitude'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.within') = '' or (not(string(get-property('uri.var.within'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'location.within=',get-property('uri.var.within'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.city') = '' or (not(string(get-property('uri.var.city'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'venue.city=',get-property('uri.var.city'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.region') = '' or (not(string(get-property('uri.var.region'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'venue.region=',get-property('uri.var.region'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.country') = '' or (not(string(get-property('uri.var.country'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'venue.country=',get-property('uri.var.country'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.organizerId') = '' or (not(string(get-property('uri.var.organizerId'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'organizer.id=',get-property('uri.var.organizerId'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.userId') = '' or (not(string(get-property('uri.var.userId'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'user.id=',get-property('uri.var.userId'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.trackingCode') = '' or (not(string(get-property('uri.var.trackingCode'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'tracking_code=',get-property('uri.var.trackingCode'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.categories') = '' or (not(string(get-property('uri.var.categories'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'categories=',get-property('uri.var.categories'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.formats') = '' or (not(string(get-property('uri.var.formats'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'formats=',get-property('uri.var.formats'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.startDateRangeStart') = '' or (not(string(get-property('uri.var.startDateRangeStart'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'start_date.range_start=',get-property('uri.var.startDateRangeStart'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.startDateRangeEnd') = '' or (not(string(get-property('uri.var.startDateRangeEnd'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'start_date.range_end=',get-property('uri.var.startDateRangeEnd'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.startDateKeyword') = '' or (not(string(get-property('uri.var.startDateKeyword'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'start_date.keyword=',get-property('uri.var.startDateKeyword'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.dateCreatedRangeStart') = '' or (not(string(get-property('uri.var.dateCreatedRangeStart'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'date_created.range_start=',get-property('uri.var.dateCreatedRangeStart'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.dateCreatedRangeEnd') = '' or (not(string(get-property('uri.var.dateCreatedRangeEnd'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'date_created.range_end=',get-property('uri.var.dateCreatedRangeEnd'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.dateCreatedKeyword') = '' or (not(string(get-property('uri.var.dateCreatedKeyword'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'date_created.keyword=',get-property('uri.var.dateCreatedKeyword'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.dateModifiedRangeStart') = '' or (not(string(get-property('uri.var.dateModifiedRangeStart'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'date_modified.range_start=',get-property('uri.var.dateModifiedRangeStart'),'&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.dateModifiedRangeEnd') = '' or (not(string(get-property('uri.var.dateModifiedRangeEnd'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'date_modified.range_end=',get-property('uri.var.dateModifiedRangeEnd'),'&amp;')"/>
            </then>
        </filter>

        <filter xpath="(not(get-property('uri.var.dateModifiedKeyword') = '' or (not(string(get-property('uri.var.dateModifiedKeyword'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'date_modified.keyword=',get-property('uri.var.dateModifiedKeyword'),'&amp;')"/>
            </then>
        </filter>
        <header name="Content-Type" scope="transport" action="remove"/>
        <call>
            <endpoint>
                <http method="get"
                      uri-template="{uri.var.eventbrite.apiUrl}/events/search/?{uri.var.apiParameters}token={uri.var.eventbrite.accessToken}"/>
                <property name="Accept" value="*/*" scope="transport"/>
            </endpoint>
        </call>
    </sequence>
</template>